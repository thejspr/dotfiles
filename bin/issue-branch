#!/usr/bin/env ruby

# usage: issue-branch <issue-id>
#
# Requirements:
# - Ruby
# - a github token (as GITHUB_TOKEN) in the environment
# - if the repo name includes the word "app" it uses git-flow style branch naming

require 'net/http'
require 'json'
require 'io/console'

trap 'SIGINT' do
  puts "Exiting"
  exit 130
end

token = ENV['GITHUB_TOKEN']
issue_id = ARGV.first

# get org and repo
origin = `git config --get remote.origin.url`.strip
repo = URI.parse(origin.gsub('.git', '')).path[1..-1]

unless token || issue_id || repo
  puts "Missing parameter. Known values: issue-id=#{issue_id.inspect} repo=#{repo.inspect} token=#{token.inspect}"
  exit(1)
end

# fetch issue details
uri = URI.parse("https://api.github.com/repos/#{repo}/issues/#{issue_id}?access_token=#{token}")
json = Net::HTTP.get(uri)
response = JSON.parse(json)

title = response['title']
  .downcase
  .gsub(/[^0-9A-Za-z\s]/, '') # remove special characters
  .gsub(/\s+/, '-').strip # replace whitespace with dash

# checkout branch, using git-flow style for app repos
if repo.include?('app')
  print "Input branch type (default is 'bugfix'): "
  branch_type = STDIN.gets.strip

  branch_type = 'bugfix' if branch_type.empty?

  if %w(feature bugfix release).include?(branch_type)
    system "git checkout -b #{branch_type}/#{issue_id}-#{title}"
  else
    puts "Invalid branch type: #{branch_type.inspect}. Aborting"
    exit(1)
  end
else
  system "git checkout -b #{title}"
end
